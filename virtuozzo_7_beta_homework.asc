Virtuozzo 7 Beta Homework
=========================
:doctype: book

Overview
--------

Some years ago we introduced our own hypervisor technology in Virtuozzo in addition to our containers. Such an offering added more flexibility to Virtuozzo, as in some cases customers preferred traditional hypervisor solutions over containers. Fast and reliable, Virtuozzo hypervisor offered a lot of enterprise features answering the needs of service providers.

Nowadays KVM has become fast and reliable enough to suite our customers' needs. For this reason, we do not need to develop and support our own hypervisor anymore. Yet KVM still lacks many required features and we are eager to implement such functionality in our new Virtuozzo 7 with KVM-based virtualization.

The two technical previews of Virtuozzo 7 we released before were focused mostly on container technology, whereas this beta is focused on KVM-based virtual machines.

Key changes in Virtuozzo 7 Beta are:

[options="compact"]
* Unified management of containers and virtual machines,
* Transition from own hypervisor to KVM,
* Online memory management for containers and VMs,
* Memory guarantees for containers and VMs,
* Features enabling VM memory overcommitment: memory autoballooning and kernel same-page merging (KSM).
* Ability to manage containers and VMs with libvirt and virt-manager,
* Guest tools for Windows and Linux VMs.

We are still working to improve the memory overcommitment mechanism to allow the commercial customers to increase density with a minimal impact on performance for end-users.

The main goal of Virtuozzo 7 Beta is to assure of our customers of the complete CLI and SDK compatibility between Virtuozzo 6 and Virtuozzo 7 that allows managing containers and new KVM-based virtual machines.

In this homework you will walk through the new Virtuozzo 7 features using a container and a virtual machine with a CentOS 7 distribution.

Installing Virtuozzo 7 Beta
---------------------------

The Virtuozzo 7 installer is based on the RHEL7 installer, so installation process is simple and straightforward. To install Virtuozzo 7 Beta, you will need the distribution ISO image available at http://updates.virtuozzo.com/virtuozzo/releases/7.0-beta/x86_64/iso/VZ-7.0-beta-x86_64-DVD.iso.

You can install Virtuozzo directly on bare metal or in a virtual machine on a system with nested virtualization support (supported hypervisors are Parallels Desktop for Mac, VMware Fusion, VMware Workstation, and VMware ESXi).

Virtuozzo 7 Beta System Requirements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following configuration is recommended for this homework:

[options="compact"]
* At least 4 CPU cores;
* At least 4GB of RAM;
* At least 64GB disk space.

Installing Virtuozzo 7 Beta On Bare Metal
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To install Virtuozzo on bare hardware, burn the distribution ISO image onto a USB stick or CD-ROM and boot your hardware node from it. Then follow wizard's instructions to install Virtuozzo 7 Beta.

Installing Virtuozzo 7 Beta In Virtual Machines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To install Virtuozzo in a VM, copy the distribution ISO image to a local drive and create a new VM from it according to your virtualization software documentation. Start the VM, boot to the Virtuozzo installer, and follow the wizard's instructions to install Virtuozzo 7 Beta.

Guest Operating Systems Supported by Virtuozzo 7 Beta
-----------------------------------------------------

Virtuozzo 7 Beta supports the following guest operating systems:

.Virtual Machines
[options="compact"]
* Windows Server 2012 R2
* Windows Server 2012
* Windows Server 2008 R2 with Service Pack 1
* CentOS 7.x (x64)
* CentOS 6.x (x64)
* Debian 8.x (x64)
* Ubuntu 14.04 LTS (x64)

.Containers
[options="compact"]
* CentOS 7.x (x64)
* CentOS 6.x (x64)
* Debian 8.x (x64)
* Ubuntu 14.04 LTS (x64)

Use Cases
---------

Creating New Virtual Machines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Creating a Virtual Machine from a Template
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For your convenience, we have prepared a custom VM template `myvm` that you can use in this homework. The template is based on CentOS 7 x64 Minimal Install and includes some additional packages.

To create a VM from the template, do the following:

. Download the template from http://updates.cloudserver.virtuozzo.com/server/pcs/en_us/virtuozzo/7/beta/virtuozzo7-sample-vm.tar.gz.
. Unpack the template to a VM folder:
+
[subs="quotes"]
----
*# tar -xvf virtuozzo7-sample-vm.tar.gz -C /vz/vmprivate*
----
. Register the new template:
+
[subs="quotes"]
----
*# prlctl register /vz/vmprivate/myvm.pvm*
----
. Check that your new VM can be listed:
+
[subs="quotes"]
----
*# prlctl list -a*
----
. Start your new VM:
+
[subs="quotes"]
----
*# prlctl start myvm*
----

The default

[options="compact"]
* root password is `Virtuozzo1`,
* VNC port is 5901, and
* VNC password is `12345678`.

Creating a Virtual Machine from an ISO Image
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To create a new VM `myvm` from scratch, do the following:

. Create a blank VM and set its RAM to 1GB:
+
[subs="quotes"]
----
*# prlctl create myvm --distribution centos*
*# prlctl set myvm --memsize 1024*
----
. Enable VNC console access:
+
[subs="quotes"]
----
*# prlctl set myvm --vnc-mode manual --vnc-port _&lt;port&gt;_ --vnc-passwd _&lt;password&gt;_*
----
. Download the CentOS image from http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1511.iso.
. Connect the image to the VM:
+
[subs="quotes"]
----
*# prlctl set myvm --device-set cdrom0 --image _&lt;path_to_image&gt;_*
----
. Start the VM:
+
[subs="quotes"]
----
*# prlctl start myvm*
----
. Access the VNC console with a VNC viewer.
. Install the OS.

The virtual machine is ready. Proceed to install the guest tools as described in the next section.

Installing Virtuozzo Guest Tools
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Virtuozzo 7 ships with the guest tools for Linux and Windows virtual machines. The guest tools allow you to:

[options="compact"]
* Configure virtual machine and container network,
* Set passwords,
* Run commands inside containers or VMs from the host,
* Enter containers or VMs,
* Change SIDs,
* Perform graceful shutdowns,
* Manage devices.

In addition, Virtuozzo guest tools also contain the autoballooning driver.

To install guest tools inside a VM `myvm`, do the following:

. Mount the guest tools image to the VM:
+
[subs="quotes"]
----
*# prlctl installtools myvm*
----
. Connect to the VM either via VNC (as described previously in this homework) or SSH if your VM already has an IP address set manually or via DHCP:
+
[subs="quotes"]
----
*# ssh root@__&lt;VM_IP_addr&gt;__*
----
. Run the guest tools installer inside the VM:
+
[subs="quotes"]
----
*# mkdir /mnt/cdrom*
*# mount /dev/cdrom /mnt/cdrom*
*# /mnt/cdrom/install*
----

The guest tools are installed.

Checking Virtual Machine Hypervisor Type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To check that the new virtual machine (`myvm`) is KVM-based, run

[subs="quotes"]
----
*# prlctl exec myvm dmidecode -s system-product-name*
----

The result must be `KVM`.

Using Online Memory Management for Virtual Machines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Online memory management is a new feature of Virtuozzo 7, based on memory hotplugging and ballooning, that allows you to increase or reduce VM memory on the fly, without rebooting the VM. The feature can only be enabled for stopped virtual machines with at least 1GB of RAM. To enable online memory management, run:

[subs="quotes"]
----
*# prlctl stop myvm*
*# prlctl set myvm --mem-hotplug on*
*# prlctl start myvm*
----

To check that the feature works:

. Wait until VM is fully booted and the balloon driver is loaded, then run:
+
[subs="quotes"]
----
*# virsh dominfo myvm*
----
+
*Used Memory* should be 1GB while *Max Memory* should be 5GB. The balloon size should be about 7GB now.
. Now increase memory size to 1.5GB:
+
[subs="quotes"]
----
*# prlctl set myvm --memsize 1536*
----
. Check the VM memory:
+
[subs="quotes"]
----
*# virsh dominfo myvm*
----
+
*Used Memory* should be 1.5GB.
. Reduce the amount of VM memory to 1GB:
+
[subs="quotes"]
----
*# prlctl set myvm --memsize 1024*
----
. Check the VM memory again:
+
[subs="quotes"]
----
*# virsh dominfo myvm*
----

Setting the Memory Guarantee for a Virtual Machine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In Virtuozzo 7, the `--memquota` option of the `prlctl` command has been dropped. Now to set the minimum amount of memory avaiable for a container or VM, the `prlctl --memguarantee` command is used. The default guarantees are 40% for virtual machines and 0% for containers.

To set a memory guarantee (in percentage of virtual machine's configured memory), run:

[subs="quotes"]
----
*# prlctl set myvm --memguarantee 80*
----

In this example, the memory guarantee is set to 80% of virtual machine's RAM.

To revert the memory guarantee value to default, run:

[subs="quotes"]
----
*# prlctl set myvm --memguarantee auto*
----

To guarantee an application inside a VM permanent access to all configured memory with no dependency on host memory pressure, set a memory guarantee for it.

Setting the Memory Guarantee for a Container
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Memory guarantee is a new feature for Virtuozzo containers. It can be set in the same way as for virtual machines.

. For this example, make sure all other containers or virtual machines on the host are stopped.
. Create two containers as follows:
+
[subs="quotes"]
----
*# prlctl create myct --vmtype ct*
*# prlctl create workload --vmtype ct*
----
. Set memory sizes for the containers. The workload is meant to have nearly as much RAM as your host has. For example, host RAM minus 2GB.
+
[subs="quotes"]
----
*# prlctl set myct --memsize 3G*
*# prlctl set workload --memsize _&lt;host_RAM_minus_2GB&gt;_*
----
. Set the memory guarantees for the containers:
+
[subs="quotes"]
----
*# prlctl set myct --memguarantee 100*
*# prlctl set workload --memguarantee auto*
----
. Start the workload container:
+
[subs="quotes"]
----
*# prlctl start workload*
----
. Try to start `myct`:
+
[subs="quotes"]
----
*# prlctl start myct*
----
+
It should start successfully, because `workload` has no workload inside or any reserved memory (as the default guarantee is 0%).
. Stop `myct` and change the memory guarantee for `workload`:
+
[subs="quotes"]
----
*# prlctl stop myct*
*# prlctl set workload --memguarantee 100*
----
. Try to start `myct` again:
+
[subs="quotes"]
----
*# prlctl start myct*
----
+
It should not start. The reason is `workload` is guaranteed all of its configured memory now (host RAM minus 1GB), and `myct` is guaranteed 3GB, so the sum of guarantees exceeds host physical RAM.

To start `myct`, you will need to stop `workload` first. To start both containers, you will need to adjust their guarantees so that their total does not exceed host physical RAM.

Managing Virtuozzo 7 Containers and Virtual Machines with libvirt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Virtuozzo 7 allows you to manage containers and VMs via the libvirt API. The supported API calls for Virtuozzo are described in the column *vz* at http://libvirt.org/hvsupport.html.

To manage Virtuozzo containers and VMs via libvirt, you must use our libvirt driver with the `vz:///system` connection option.

Managing Virtuozzo 7 Virtual Machines with virsh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Virsh is a default utility for managing KVM-based virtual machines. As both containers and virtual machines in Virtuozzo 7 are managed via the libvirt API, virsh works too.

Here is how you use virsh to perform basic tasks with Virtuozzo 7 virtual machines:

. Set the default connection URI:
+
[subs="quotes"]
----
*# export LIBVIRT_DEFAULT_URI="vz:///system"*
----
. List all the instances:
+
[subs="quotes"]
----
*# virsh list --all*
----
+
Virsh should show all instances, including virtual machines and containers.
. Start the VM:
+
[subs="quotes"]
----
*# virsh start myvm*
----
. Start the container:
+
[subs="quotes"]
----
*# virsh start myct*
----
. Output container configuration:
+
[subs="quotes"]
----
*# virsh dominfo myct*
----
. Stop the VM:
+
[subs="quotes"]
----
*# virsh destroy myvm*
----
. Stop the container:
+
[subs="quotes"]
----
*# virsh destroy myct*
----
. To check that both `myvm` and `myct` are deleted, list the instances again:
+
[subs="quotes"]
----
*# virsh list --all*
----

For the complete list of supported options, visit https://libvirt.org/hvsupport.html.

Managing Virtuozzo 7 Virtual Machines with virt-manager
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Once again, as Virtuozzo 7 containers and VMs are managed via the libvirt API, you can use Virtual Machine Manager (virt-manager) for the same purpose. You will need to install our customized version of virt-manager that supports any Red-Hat-based OS. We tested our version of virt-manager with CentOS 7.

Installing virt-manager
^^^^^^^^^^^^^^^^^^^^^^^

To prepare for managing Virtuozzo 7 containers and VMs with virt-manager, do the following:

. Add the Virtuozzo repository to your OS by creating `/etc/yum.repos.d/virtuozzo.repo` with the following contents:
+
[subs="quotes"]
----
[vz]
name=vz
mirrorlist=http://download.openvz.org/virtuozzo/mirrorlists/7.0/factory-os.mirrorlist
enabled=1
gpgcheck=0
----
. Install virt-manager from the Virtuozzo repository:
+
[subs="quotes"]
----
*# yum install virt-manager*
----
. Connect virt-manager to Virtuozzo:
[loweralpha]
.. Launch virt-manager.
.. In the *File* > *Add connection* window, select *Virtuozzo* in the hypervisor drop-down list.
.. Select the preferred connection type (SSH by default) and specify connection options.
.. Enter the password.
. On the *Edit* > *Preferences* > *NewVM* tab, change *Storage format* from `System default (qcow2)` to `QCOW2`.

[NOTE]
[subs="quotes"]
====
*Note:* Virt-manager can create its own default network with NAT while creating a container or VM. Virtuozzo 7 does not support NAT by default. For instructions on how to enable NAT, visit https://openvz.org/Using_NAT_for_container_with_private_IPs. We recommend that you use a Virtuozzo bridged or host-routed network.
====

Using virt-manager
^^^^^^^^^^^^^^^^^^

To create a virtual machine with virt-manager, do the following:

. Launch virt-manager.
. Select the Virtuozzo hypervisor.
+
image::images/vmm1.png[align="center",scaledwidth="55%"]
. Click the new VM icon.
. Choose the options as shown on the screenshot and click *Forward*:
+
image::images/vmm2.png[align="center",scaledwidth="55%"]
. Click *Browse* next to the *Use ISO image* field.
+
image::images/vmm3.png[align="center",scaledwidth="55%"]
. Click the plus button to add a new image repository.
. Specify the repository name and type.
+
image::images/vmm3_2.png[align="center",scaledwidth="55%"]
. Enter the path to your image repository and click *Finish*.
+
image::images/vmm4.png[align="center",scaledwidth="55%"]
. Choose your ISO image and click *Choose Volume*.
+
image::images/vmm5.png[align="center",scaledwidth="55%"]
. Choose your OS type and click *Forward*.
+
image::images/vmm6.png[align="center",scaledwidth="55%"]
. Choose VM options and click *Forward*.
. Choose storage options and click *Forward*.
. Enter the VM name and choose the network as shown below.
+
image::images/vmm7.png[align="center",scaledwidth="55%"]
. When the VM starts, connect to its console by clicking the *Open* button.

The virtual machine is ready. A Virtuozzo container can be created in a similar way.

Working with Microsoft Windows Virtual Machines
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Virtuozzo 7 Beta supports several Windows Server guest operating systems listed earlier in this homework. Windows-based VMs do not differ from Linux-based ones, so you can also go through the homework with a virtual machine running Windows Server 2012 R2, for example. To do this, you will first need to:

. Create a blank VM for a Windows distribution.
. Install Windows Server 2012 R2 in the VM.
. Install Virtuozzo guest tools in the VM.
